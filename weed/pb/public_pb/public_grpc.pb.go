// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: public.proto

package public_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SeaweedFSClient is the client API for SeaweedFS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeaweedFSClient interface {
	V1GetInfo(ctx context.Context, in *V1GetInfoRequest, opts ...grpc.CallOption) (*V1GetInfoResponse, error)
}

type seaweedFSClient struct {
	cc grpc.ClientConnInterface
}

func NewSeaweedFSClient(cc grpc.ClientConnInterface) SeaweedFSClient {
	return &seaweedFSClient{cc}
}

func (c *seaweedFSClient) V1GetInfo(ctx context.Context, in *V1GetInfoRequest, opts ...grpc.CallOption) (*V1GetInfoResponse, error) {
	out := new(V1GetInfoResponse)
	err := c.cc.Invoke(ctx, "/public_pb.SeaweedFS/V1GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeaweedFSServer is the server API for SeaweedFS service.
// All implementations must embed UnimplementedSeaweedFSServer
// for forward compatibility
type SeaweedFSServer interface {
	V1GetInfo(context.Context, *V1GetInfoRequest) (*V1GetInfoResponse, error)
	mustEmbedUnimplementedSeaweedFSServer()
}

// UnimplementedSeaweedFSServer must be embedded to have forward compatible implementations.
type UnimplementedSeaweedFSServer struct {
}

func (UnimplementedSeaweedFSServer) V1GetInfo(context.Context, *V1GetInfoRequest) (*V1GetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method V1GetInfo not implemented")
}
func (UnimplementedSeaweedFSServer) mustEmbedUnimplementedSeaweedFSServer() {}

// UnsafeSeaweedFSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeaweedFSServer will
// result in compilation errors.
type UnsafeSeaweedFSServer interface {
	mustEmbedUnimplementedSeaweedFSServer()
}

func RegisterSeaweedFSServer(s grpc.ServiceRegistrar, srv SeaweedFSServer) {
	s.RegisterService(&SeaweedFS_ServiceDesc, srv)
}

func _SeaweedFS_V1GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(V1GetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeaweedFSServer).V1GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/public_pb.SeaweedFS/V1GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeaweedFSServer).V1GetInfo(ctx, req.(*V1GetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SeaweedFS_ServiceDesc is the grpc.ServiceDesc for SeaweedFS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SeaweedFS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "public_pb.SeaweedFS",
	HandlerType: (*SeaweedFSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "V1GetInfo",
			Handler:    _SeaweedFS_V1GetInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public.proto",
}
